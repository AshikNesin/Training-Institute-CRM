<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pixBoxLogo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        TkSuQmCC
</value>
  </data>
</root>